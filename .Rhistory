summary(FYGPA)
FYGPA=read.csv(file.choose(), header =T)
summary(FYGPA)
head(FYGPA)
dataset <- FYGPA[,-1]
dataset
dataset <- FYGPA[,-2,-1]
dataset
dataset <- FYGPA[,-2]
dataset <- FYGPA[,c(-1,-2)]
dataset
dataset <- FYGPA[,c(-1,-2)]
modelAll <- lm(GPA ~ ., data=dataset)
attach(FYGPA)
modelAll <- lm(GPA ~ ., data=dataset)
summary(modelAll)
par(mfrow=c(2,2))
plot(modelAll)
par(mfrow=c(1,1))
modelBasic <- lm(GPA ~ 1)
summary(modelBasic)
modelAll <- lm(GPA ~ ., data=dataset)
summary(modelAll)
dataset <- FYGPA[,c(-1,-2)]
modelAll <- lm(GPA ~ ., data=dataset)
summary(modelAll)
par(mfrow=c(2,2))
plot(modelAll)
par(mfrow=c(1,1))
modelBasic <- lm(GPA ~ 1)
summary(modelBasic)
step(modelAll,scope=list(lower=modelBasic,upper=modelAll),direction = "backward")
step(modelBasic,direction="forward",scope=formula(modelAll))
modelFit<-lm(formula = GPA ~ HSGPA + SATV + HU + SS + White, data = dataset)
summary(modelFit)
par(mfrow=c(2,2))
plot(modelFit)
par(mfrow=c(1,1))
plot(HSGPA,GPA)
modelBadFit<-lm(formula = GPA ~ HSGPA, data = FYGPA)
summary(modelBadFit)
par(mfrow=c(2,2))
plot(modelBadFit)
par(mfrow=c(1,1))
library(FNN) # need this library for kNN
plot(HSGPA, GPA,xlab="High-school GPA", ylab="College GPA", main="k nearest neighbor regression")
m=knn.reg(HSGPA,y=GPA,k=10) #k=10
x=HSGPA
fit=m$pred
lines(x[order(x)], fit[order(x)], col="blue",lwd=2)
m=knn.reg(HSGPA,y=GPA,k=50) #k=50
x=HSGPA
fit=m$pred
lines(x[order(x)], fit[order(x)], col="red",lwd=2)
plot(SATV,GPA)
modelBadFit<-lm(formula = GPA ~ SATV, data = FYGPA)
summary(modelBadFit)
lines(ksmooth(x=SATV, y=GPA,kernel="normal", bandwidth=25), lwd=2, col="red")
dataset <- FYGPA[,-1]
modelAll <- lm(GPA ~ ., data=dataset)
summary(modelAll)
par(mfrow=c(2,2))
plot(modelAll)
par(mfrow=c(1,1))
modelBasic <- lm(GPA ~ 1)
summary(modelBasic)
step(modelAll,scope=list(lower=modelBasic,upper=modelAll),direction = "backward")
step(modelBasic,direction="forward",scope=formula(modelAll))
modelFit<-lm(formula = GPA ~ HSGPA + SATV + HU + SS + White, data = dataset)
summary(modelFit)
par(mfrow=c(2,2))
plot(modelFit)
par(mfrow=c(1,1))
plot(HSGPA,GPA)
modelBadFit<-lm(formula = GPA ~ HSGPA, data = FYGPA)
summary(modelBadFit)
dataset
dataset <- FYGPA[,c(-1,-2)]
modelAll <- lm(GPA ~ ., data=dataset)
barplot(GPA)
hist(GPA)
set.seed(1)
n=219 # No.of students
nboot=100
student_gpa=matrix(NA,nrow=nboot, ncol= n)
set.seed(1)
n=219 # No.of students
nboot=100
student_gpa=matrix(NA,nrow=nboot, ncol= n)
for (i in 1:nboot){
GPAsample = sample(1:n, n, replace = T)
student_gpa[i,] = GPA[GPAsample]
}
gpaAvg=apply(student_gpa, 1, mean)
gpaAvg
hist(gpaAvg, xlab="Bootstrap mean", main="Histogram of bootstrap means\nFirstYearGPA")
abline(v=mean(gpaAvg), col="red",lwd=2)
abline(v=mean(GPA),col="blue",lwd=2)
legend("topright", c("Population", "Sample"), lty=c(1,1), col=c("red", "blue"))
gpaAvg=apply(student_gpa, 1, mean)
hist(gpaAvg, xlab="Bootstrap mean", main="Histogram of bootstrap means\nFirstYearGPA")
mean(gpaAvg)
mean(GPA)
set.seed(1)
n=219 # No.of students
nboot=1000
student_gpa=matrix(NA,nrow=nboot, ncol= n)
for (i in 1:nboot){
GPAsample = sample(1:n, n, replace = T)
student_gpa[i,] = GPA[GPAsample]
}
gpaAvg=apply(student_gpa, 1, mean)
hist(gpaAvg, xlab="Bootstrap mean", main="Histogram of bootstrap means\nFirstYearGPA")
abline(v=mean(gpaAvg), col="red",lwd=2)
abline(v=mean(GPA),col="blue",lwd=2)
set.seed(1)
n=219 # No.of students
nboot=150
student_gpa=matrix(NA,nrow=nboot, ncol= n)
for (i in 1:nboot){
GPAsample = sample(1:n, n, replace = T)
student_gpa[i,] = GPA[GPAsample]
}
gpaAvg=apply(student_gpa, 1, mean)
hist(gpaAvg, xlab="Bootstrap mean", main="Histogram of bootstrap means\nFirstYearGPA")
abline(v=mean(gpaAvg), col="red",lwd=2)
abline(v=mean(GPA),col="blue",lwd=2)
set.seed(1)
n=219 # No.of students
nboot=150
student_gpa=matrix(NA,nrow=nboot, ncol= n)
for (i in 1:nboot){
GPAsample = sample(1:n, n, replace = T)
student_gpa[i,] = GPA[GPAsample]
}
gpaAvg=apply(student_gpa, 1, mean)
hist(gpaAvg, xlab="Bootstrap mean", main="Histogram of bootstrap means\nFirstYearGPA")
abline(v=mean(gpaAvg), col="red",lwd=2)
sd(gpaAvg)
sd(GPA)/sqrt(219)
set.seed(1)
n=219 # No.of students
nboot=150
student_gpa=matrix(NA,nrow=nboot, ncol= n)
for (i in 1:nboot){
GPAsample = sample(1:n, n, replace = T)
student_gpa[i,] = GPA[GPAsample]
}
gpaAvg=apply(student_gpa, 1, mean)
hist(gpaAvg, xlab="Bootstrap mean", main="Histogram of bootstrap means\nFirstYearGPA")
abline(v=mean(gpaAvg), col="red",lwd=2)
sd(gpaAvg)      #Predicted population standard error
sd(GPA)/sqrt(219) # Sample Standard Error
mean(GPA)
dim(FYGPA)
alpha = 0.05
qt(1-alpha/2,df=218)
mean(GPA)
SE=sd(gpaAvg)      #Predicted population standard error
sd(GPA)/sqrt(219) # Sample Standard Error
alpha = 0.05
tMult<-qt(1-alpha/2,df=218)
mean(GPA)-tMult*SE
mean(GPA)+tMult*SE
sd(GPA)/sqrt(219) # Sample Standard Error
SE=sd(gpaAvg)      #Predicted population standard error
SE
set.seed(1)
n=219 # No.of students
nboot=150
student_gpa=matrix(NA,nrow=nboot, ncol= n)
for (i in 1:nboot){
GPAsample = sample(1:n, n, replace = T)
student_gpa[i,] = GPA[GPAsample]
}
gpaAvg=apply(student_gpa, 1, mean)
hist(gpaAvg, xlab="Bootstrap mean", main="Histogram of bootstrap means\nFirstYearGPA")
abline(v=mean(gpaAvg), col="red",lwd=2)
mean(GPA)
SE=sd(gpaAvg)      #Predicted population standard error
sd(GPA)/sqrt(219) # Sample Standard Error
alpha = 0.05
tMult<-qt(1-alpha/2,df=218)
mean(GPA)-tMult*SE
mean(GPA)+tMult*SE
mean(gpaAvg)
